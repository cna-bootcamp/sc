server:
  port: ${SERVER_PORT:19080}
spring:
  application:
    name: scg
  jwt:
    secret: ${JWT_SECRET:8O2HQ13etL2BWZvYOiWsJ5uWFoLi6NBUG8divYVoCgtHVvlk3dqRksMl16toztDUeBTSIuOOPvHIrYq11G2BwQ==}
  # -- Load banancer 설정 : 기본 L/B인 Ribbon비활성화
  cloud.loadbalancer:
    ribbon.enabled: false
    cache.enabled: true

  # -- Load Balancer의 캐시 타입 설정
  cache.type: caffeine

eureka:
  instance:
    hostname: ${HOSTNAME:localhost}
    instanceId: ${POD_IP:localhost}:${SERVER_PORT:19080}
    preferIpAddress: true
    nonSecurePort: ${SERVER_PORT:19080}
    securePort: 443
    nonSecurePortEnabled: true
    securePortEnabled: false
  client:
    service-url:
      defaultZone: ${EUREKA_SERVERS:http://eureka1.127.0.0.1.nip.io:8761/eureka/,http://eureka2.127.0.0.1.nip.io:8762/eureka/}
    registryFetchIntervalSeconds: 5
    instanceInfoReplicationIntervalSeconds: 5

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO

# -- Actuator
management:
  endpoints:
    web:
      exposure:
        include: health, info, env, mappings, routes

#========= 라우팅
spring.cloud.gateway:
  # CORS
  globalcors:
    cors-configurations:
      '[/**]':
        allowedOrigins: "https://aaa.bbb.com"
        allowedMethods:
          - GET
      '[/api/**]':
        allowedOrigins:
          - http://localhost:3000
          - ${ALLOWED_ORIGINS:"http://localhost:3000"}
        allowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - OPTIONS
        allowedHeaders: "*"
  # Timeout
  httpclient:
    connect-timeout: 1000
    response-timeout: 3000

  # Routing
  # 모든 서비스가 k8s환경에서만 서비스 된다면 Eureka를 안 쓰고 k8s서비스로 L/B하는게 제일 좋음
  # 왜냐하면 k8s서비스의 liveness/readiness 체크하여 연결하는 기능을 사용할 수 있고, 불필요한 Eureka 네트워킹을 안할 수 있기 때문임
  # 이 예제에서는 Eureka에 Pod IP를 등록하고 SCG가 L/B하고 있음. 로그인요청만 Eureka연동하고, 나머지는 k8s서비스 사용함
  routes:
    - id: auth
      uri: lb://member-service
      #uri: http://member:18080
      #uri: http://172.17.0.24:18080
      predicates:
        - Path=/api/auth/**

    - id: member
      uri: http://member:18080
      predicates:
        - Path=/api/members/**

    - id: subrecommend
      uri: http://subrecommend:18081
      predicates:
        - Path=/api/subrecommend/**

    - id: mysub
      uri: http://mysub:18082
      predicates:
        - Path=/api/my-subs/**

    - id: mygrp
      uri: http://mygrp:18083
      predicates:
        - Path=/api/my-groups/**

    - id: transfer
      uri: http://transfer:18084
      predicates:
        - Path=/api/transfer/**
      filters:
        - name: Retry
          args:
            retries: 5              # 재시도 횟수
            statuses: BAD_GATEWAY, INTERNAL_SERVER_ERROR, SERVICE_UNAVAILABLE #재시도 할 응답상태
            methods: GET, POST  # 재시도 메소드
            backoff:
              firstBackoff: 500ms   #첫번째 재시도는 실패 후 0.5초 후 수행
              maxBackoff: 2000ms    #재시도 간격
              factor: 10            #firstBackoff * (factor^retries)가 재시도 간격임. maxBackoff보다 클 수는 없음.
              #exceptions:             # Connect가 안되는 경우에만 retry(POST일때는 불필요한 재시도 방지를 위해 설정하는게 좋음)
              #- java.net.ConnectException
      metadata: #현재 요청에 대해서만 Timeout 정의 시
        connect-timeout: 1000
        response-timeout: 3000

  # 그 외 application.yml에 설정 예제는 아래 페이지 참조
  # https://happycloud-lee.tistory.com/218
  #========================

  #========= Default Filters ========
  default-filters:
    #-- 인증 검사: JWT Token 유효성 검사
    - AuthorizationHeaderFilter

    # Request Logging
    - name: PreLogger
      args:
        logging: true
        baseMessage: "######### Logging for Request ############"

    # Response Logging
    - name: PostLogger
      args:
        logging: true
        baseMessage: "######### Logging for Response ############"

    # 중요) 응답에 지정된 헤더가 중복되면 하나만 남김. 다른 필터와의 우선순위로 동작 안할 수 있으므로 가장 마지막에 지정
    - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
#=====================================

