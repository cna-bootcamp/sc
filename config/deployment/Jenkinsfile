
def label = "config-${env.BUILD_NUMBER}"

/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
	//slackSend (channel: '#cicd', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}

notifySlack("STARTED", "#FFFF00")

podTemplate(
	label: label, 
	containers: [
		containerTemplate(name: "trivy", image: "aquasec/trivy", ttyEnabled: true, command: "cat"),
		//containerTemplate(name: "kubectl", image: "lachlanevenson/k8s-kubectl", command: "cat", ttyEnabled: true),
		containerTemplate(name: "kubectl", image: "lachlanevenson/k8s-kubectl", ttyEnabled: true,
            command: "sh",
            args: "-c 'cp /usr/local/bin/envsubst /usr/bin/envsubst && tail -f /dev/null'"
        ),
		containerTemplate(name: "gradle", image: "gradle:jdk17", ttyEnabled: true, command: "cat"),
		containerTemplate(name: 'podman', image: 'mgoltzsche/podman', ttyEnabled: true, command: 'cat', privileged: true)
	],
	//volume mount: serverPath는 반드시 nfs서버 작성 시 지정한 디렉토리밑에 생성되어 있어야 함
    volumes: [
    	nfsVolume( mountPath: '/root/.gradle', serverAddress: '119.81.125.20', serverPath: '/data/gradle', readOnly: false ),
    ]
) 

{
	node(label) {
		stage("Get Source") {
			git branch: 'main', url: 'https://github.com/cna-bootcamp/sc.git'
        } 

        baseDir = "config/deployment"
		//-- Read pipeline.properties and setting variables
		def props = readProperties  file:"${baseDir}/pipeline.properties"
		
		credentialRegistry=props["credential_registry"]
		registry=props["registry"]
		organization=props["organization"]
		repository=props["repository"]
		tag=props["tag"]
		srcDir=props["src_dir"]
		namespace=props["namespace"]
		manifest=props["manifest"]
		selector_key=props["selector_key"]
		selector_val=props["selector_val"]

		try {
			stage("Build Jar") {
				container("gradle") {
					sh 'echo "Build jar under target directory"'
					sh "gradle :${srcDir}:build -x test"
				}
			}

			stage("Build Container image") {
				container("podman") {
					withCredentials([usernamePassword(
						credentialsId: "${credentialRegistry}",
						usernameVariable: 'USER',
						passwordVariable: 'PASSWORD'
						)]) {
						    sh 'echo user "$USER" pasword "$PASSWORD"'
						    sh "podman login ${registry} --username ${USER} --password ${PASSWORD}"
							sh "podman build -f ./${baseDir}/Dockerfile -t ${registry}/${organization}/${repository}:${tag} --build-arg ARTIFACTORY_FILE=${repository}.jar ${srcDir}"
							sh "sleep 2"
							sh "podman push ${registry}/${organization}/${repository}:${tag}"
							sh "podman tag ${registry}/${organization}/${repository}:${tag} ${registry}/${organization}/${repository}:latest"
							sh "podman push ${registry}/${organization}/${repository}:latest"
					}
				}
			}
/*
			stage("Scan Image Vulnerability") {
				container("trivy"){
					sh "trivy image ${registry}/${organization}/${repository}:${tag}"	
				}
			}
*/
			try {
				stage( "Clean Up Existing Deployments" ) {
					container("kubectl") {
						sh "kubectl delete deploy -n ${namespace} --selector=${selector_key}=${selector_val}"
					}
				}
			} catch(e) { 
				echo "No existed Deployments"
			}

			stage( "Deploy to Cluster" ) {
				container("kubectl") {
				    sh "set -a"
				    sh "source ${baseDir}/deploy_env_vars"
				    sh "set +a"
				    sh "/usr/bin/envsubst < ${baseDir}/${manifest}.template > ${baseDir}/${manifest}"
					sh "kubectl apply -f ${baseDir}/${manifest} -n ${namespace}"
					sh "sleep 5"
				}
			}

	        notifySlack("${currentBuild.currentResult}", "#00FF00")
			echo "**** FINISH ALL STAGES : SUCCESS"
		
		} catch(e) {
			currentBuild.result = "FAILED"
            notifySlack("${currentBuild.currentResult}", "#FF0000")            
		}
	}
}