def SRC_DIR = "config"
def PIPELINE_ID = "${SRC_DIR}-${env.BUILD_NUMBER}"
def NFS_HOST = "165.192.76.211"
def NFS_DIR = "data"
def DOCKER_CREDENTIAL = "credential_cna"
def TRIVY_CACHE_DIR = "trivy-cache"

def IMAGE_TRIVY = "aquasec/trivy"
def IMAGE_KUBECTL = "lachlanevenson/k8s-kubectl"
def IMAGE_GRADLE = "gradle:jdk17"
def IMAGE_PODMAN = "mgoltzsche/podman"
def IMAGE_ENVSUBST = "hiondal/envsubst"

notifySlack("STARTED", "#FFFF00")

podTemplate(
    label: "${PIPELINE_ID}",
    containers: [
        containerTemplate(name: "trivy", image: "${IMAGE_TRIVY}", ttyEnabled: true, command: "cat"),
        containerTemplate(name: "kubectl", image: "${IMAGE_KUBECTL}", command: "cat", ttyEnabled: true),
        containerTemplate(name: "gradle", image: "${IMAGE_GRADLE}", ttyEnabled: true, command: "cat"),
        containerTemplate(name: 'podman', image: "${IMAGE_PODMAN}", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'envsubst', image: "${IMAGE_ENVSUBST}", command: 'sleep', args: '1h')
    ],
    volumes: [
        nfsVolume( mountPath: "/home/gradle/.gradle", serverAddress: "${NFS_HOST}", serverPath: "/${NFS_DIR}/gradle", readOnly: false ),
        nfsVolume(mountPath: "/${TRIVY_CACHE_DIR}", serverAddress: "${NFS_HOST}", serverPath: "/${NFS_DIR}/${TRIVY_CACHE_DIR}", readOnly: false)
    ]
)

{
    node("${PIPELINE_ID}") {
        stage("Get Source") {
            checkout scm
        }

        script {
            def hasChangesInConfig = checkChangesInDirectory("${SRC_DIR}")

            if (!hasChangesInConfig) {
                echo "No changes in <${SRC_DIR}> directory. Skipping pipeline."
                currentBuild.result = 'SUCCESS'
                notifySlack("SKIPPED", "#00FF00")
                return
            }
        }

        baseDir = "${SRC_DIR}/deployment"
        def props = readProperties  file:"${baseDir}/pipeline.properties"

        artifactoryFile=props["artifactory_file"]
        registry=props["registry"]
        organization=props["organization"]
        repository=props["repository"]
        tag=props["tag"]
        namespace=props["namespace"]
        manifest=props["manifest"]
        selector_key=props["selector_key"]
        selector_val=props["selector_val"]

        try {
            stage("Build Jar") {
                container("gradle") {
                    sh 'echo "Build jar under target directory"'
                    sh "gradle :${SRC_DIR}:build -x test"
                }
            }

            stage("Build Container image") {
                container("podman") {
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_CREDENTIAL}",
                        usernameVariable: 'USER',
                        passwordVariable: 'PASSWORD'
                        )]) {
                            sh 'echo user "$USER" pasword "$PASSWORD"'
                            sh "podman login ${registry} --username ${USER} --password ${PASSWORD}"
                            sh "podman build -f ${baseDir}/Dockerfile -t ${registry}/${organization}/${repository}:${tag} --build-arg ARTIFACTORY_FILE=${artifactoryFile} ${SRC_DIR}"
                            sh "sleep 2"
                            sh "podman push ${registry}/${organization}/${repository}:${tag}"
                            sh "podman tag ${registry}/${organization}/${repository}:${tag} ${registry}/${organization}/${repository}:latest"
                            sh "podman push ${registry}/${organization}/${repository}:latest"
                    }
                }
            }

            stage("Scan Image Vulnerability") {
                timeout(time: 10, unit: 'MINUTES') {
                    container("trivy"){
                        sh """
                            trivy image \
                                --cache-dir /${TRIVY_CACHE_DIR} \
                                --scanners vuln \
                                --severity HIGH,CRITICAL \
                                ${registry}/${organization}/${repository}:${tag}
                        """
                    }
                }
            }

            try {
                stage( "Clean Up Existing Deployments" ) {
                    container("kubectl") {
                        sh "kubectl delete deploy -n ${namespace} --selector=${selector_key}=${selector_val}"
                    }
                }
            } catch(e) {
                echo "No existed Deployments"
            }

            stage( "Generate deployment yaml" ) {
                container("envsubst") {
                    sh """
                        set -a
                        source ${baseDir}/deploy_env_vars
                        set +a

                        envsubst < ${baseDir}/${manifest}.template > ${baseDir}/${manifest}
                        cat ${baseDir}/${manifest}
                    """
                }
            }

            stage( "Deploy to Cluster" ) {
                container("kubectl") {
                    sh "kubectl apply -f ${baseDir}/${manifest} -n ${namespace}"
                    sh "sleep 5"
                }
            }

            notifySlack("${currentBuild.currentResult}", "#00FF00")
            echo "**** FINISH ALL STAGES : SUCCESS"

        } catch(e) {
            currentBuild.result = "FAILED"
            notifySlack("${currentBuild.currentResult}", "#FF0000")
        }
    }
}

/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
    //slackSend (channel: '#cicd', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}

def checkChangesInDirectory(String directory) {
    def changeLogSets = currentBuild.changeSets
    def hasChangesInDirectory = false

    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            def files = entry.affectedFiles
            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                if (file.path.startsWith("${directory}/")) {
                    hasChangesInDirectory = true
                    break
                }
            }
        }
    }

    return hasChangesInDirectory
}