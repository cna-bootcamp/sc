def PIPELINE_ID = "config-${env.BUILD_NUMBER}"
def GIT_URL = "https://github.com/cna-bootcamp/sc.git"
def GIT_BRANCH = "dev"
def NFS_HOST = "119.81.125.20"
def NFS_DIR = "data"
def DOCKER_CREDENTIAL = "credential_cna"
def TRIVY_CACHE_DIR = "trivy-cache"

def IMAGE_TRIVY = "aquasec/trivy"
def IMAGE_KUBECTL = "lachlanevenson/k8s-kubectl"
def IMAGE_GRADLE = "gradle:jdk17"
def IMAGE_PODMAN = "mgoltzsche/podman"
def IMAGE_ENVSUBST = "hiondal/envsubst"

/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
	//slackSend (channel: '#cicd', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}

notifySlack("STARTED", "#FFFF00")

podTemplate(
	label: "${PIPELINE_ID}",
	containers: [
		containerTemplate(name: "trivy", image: "${IMAGE_TRIVY}", ttyEnabled: true, command: "cat"),
		containerTemplate(name: "kubectl", image: "${IMAGE_KUBECTL}", command: "cat", ttyEnabled: true),
		containerTemplate(name: "gradle", image: "${IMAGE_GRADLE}", ttyEnabled: true, command: "cat"),
		containerTemplate(name: 'podman', image: "${IMAGE_PODMAN}", ttyEnabled: true, command: 'cat', privileged: true),
		containerTemplate(name: 'envsubst', image: "${IMAGE_ENVSUBST}", command: 'sleep', args: '1h')
	],
	//volume mount: serverPath는 반드시 nfs서버 작성 시 지정한 디렉토리밑에 생성되어 있어야 함
    volumes: [
    	nfsVolume( mountPath: "/home/gradle/.gradle", serverAddress: "${NFS_HOST}", serverPath: "/${NFS_DIR}/gradle", readOnly: false ),
    	nfsVolume(mountPath: "/${TRIVY_CACHE_DIR}", serverAddress: "${NFS_HOST}", serverPath: "/${NFS_DIR}/${TRIVY_CACHE_DIR}", readOnly: false)
    ]
) 

{
	node("${PIPELINE_ID}") {
        stage("Pre-pull Images") {
            container("podman") {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL}", usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh 'podman login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS'
                    sh "podman pull ${IMAGE_TRIVY}"
                    sh "podman pull ${IMAGE_KUBECTL}"
                    sh "podman pull ${IMAGE_GRADLE}"
                    sh "podman pull ${IMAGE_PODMAN}"
                    sh "podman pull ${IMAGE_ENVSUBST}"
                }
            }
        }

		stage("Get Source") {
			git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
        } 

        baseDir = "config/deployment"
		//-- Read pipeline.properties and setting variables
		def props = readProperties  file:"${baseDir}/pipeline.properties"

		registry=props["registry"]
		organization=props["organization"]
		repository=props["repository"]
		tag=props["tag"]
		srcDir=props["src_dir"]
		namespace=props["namespace"]
		manifest=props["manifest"]
		selector_key=props["selector_key"]
		selector_val=props["selector_val"]

		try {
			stage("Build Jar") {
				container("gradle") {
					sh 'echo "Build jar under target directory"'
					sh "gradle :${srcDir}:build -x test"
				}
			}

			stage("Build Container image") {
				container("podman") {
					withCredentials([usernamePassword(
						credentialsId: "${DOCKER_CREDENTIAL}",
						usernameVariable: 'USER',
						passwordVariable: 'PASSWORD'
						)]) {
						    sh 'echo user "$USER" pasword "$PASSWORD"'
						    sh "podman login ${registry} --username ${USER} --password ${PASSWORD}"
							sh "podman build -f ./${baseDir}/Dockerfile -t ${registry}/${organization}/${repository}:${tag} --build-arg ARTIFACTORY_FILE=${repository}.jar ${srcDir}"
							sh "sleep 2"
							sh "podman push ${registry}/${organization}/${repository}:${tag}"
							sh "podman tag ${registry}/${organization}/${repository}:${tag} ${registry}/${organization}/${repository}:latest"
							sh "podman push ${registry}/${organization}/${repository}:latest"
					}
				}
			}

			stage("Scan Image Vulnerability") {
			    timeout(time: 10, unit: 'MINUTES') {    //최초에 오래 걸려 timeout시간을 늘려줌
                    container("trivy"){
                        sh """
                            trivy image \
                                --cache-dir /${TRIVY_CACHE_DIR} \
                                --scanners vuln \
                                --severity HIGH,CRITICAL \
                                ${registry}/${organization}/${repository}:${tag}
                        """
                    }
			    }
			}

			try {
				stage( "Clean Up Existing Deployments" ) {
					container("kubectl") {
						sh "kubectl delete deploy -n ${namespace} --selector=${selector_key}=${selector_val}"
					}
				}
			} catch(e) { 
				echo "No existed Deployments"
			}

            stage( "Generate deployment yaml" ) {
            	container("envsubst") {
            	    sh """
                        set -a
                        source ${baseDir}/deploy_env_vars
                        set +a

                        envsubst < ${baseDir}/${manifest}.template > ${baseDir}/${manifest}
                        cat ${baseDir}/${manifest}
                    """
                }
            }

			stage( "Deploy to Cluster" ) {
				container("kubectl") {
				    sh "kubectl apply -f ${baseDir}/${manifest} -n ${namespace}"
					sh "sleep 5"
				}
			}

	        notifySlack("${currentBuild.currentResult}", "#00FF00")
			echo "**** FINISH ALL STAGES : SUCCESS"
		
		} catch(e) {
			currentBuild.result = "FAILED"
            notifySlack("${currentBuild.currentResult}", "#FF0000")            
		}
	}
}